#!/bin/bash

function alta {

arch=$1
i=0

regOK=0
regNOK=0

while read -r linea
do
	if [ "$i" -eq 0 ] || [ -z "$linea" ] ; then
		let i=i+1		
		continue
		#es cabecera o en blanco
	fi
#$arch $superID $usuario $fechaAUX $cantCampos $ubicProd $ubicPrecio
	superID=$2
	usuario=$3
	fecha=$4

	cantCampos=`echo $linea|sed 's/[^;]//g'|wc -m`
	if [ $cantCampos -ne $5 ] ; then
		let regNOK=regNOK+1
		continue
	fi

	prod=`echo "$linea" | cut -s -f"$6" -d';'`
	precio=`echo "$linea" | cut -s -f"$7" -d';'`

	if [ "$prod" = "" ] || [ "$precio" = "" ] || [[ "$prod" =~ ^\ *$ ]] || [[ "$precio" =~ ^\ *$ ]] ; then
		let regNOK=regNOK+1
		continue
	fi

	let regOK=regOK+1

	echo "$superID;$usuario;$fecha;$prod;$precio" >> $MAEDIR/precios.mae
done < "$arch"

$BINDIR/Logging Masterlist "Registros OK: "$regOK INFO
$BINDIR/Logging Masterlist "Registros NOK: "$regNOK INFO

return 0

}


function reemplazo {

arch=$1

#borro todos los que voy a reemplazar

regBorrados=`grep -i -c '^'"$superID"';'"$usuario"';'"$8"';[^;]\+;[0-9]\+$' $MAEDIR/precios.mae`
sed -i -n '/^'"$superID"';'"$usuario"';'"$8"';[^;]\+;[^;]\+$/d' $MAEDIR/precios.mae

$BINDIR/Logging Masterlist "Registros borrados: "$regBorrados INFO

#llamo a alta

# $arch $superID $usuario $fechaAUX $cantCampos $ubicProd $ubicPrecio $fechaAUXVieja
#$arch $superID $usuario $fechaAUX $cantCampos $ubicProd $ubicPrecio


alta $1 $2 $3 $4 $5 $6 $7

return 0

}




$BINDIR/Logging Masterlist "Inicio de Masterlist" INFO

shopt -s nullglob

archPrecios=($MAEDIR/precios/*.*)
cantArchProc=${#archPrecios[@]}
$BINDIR/Logging Masterlist "Cantidad de listas a procesar: $cantArchProc" INFO

shopt -u nullglob

if [ ! $cantArchProc -eq 0 ] ; then

	for arch in $MAEDIR/precios/*.*
	do
		nombre=`basename "$arch"`
		$BINDIR/Logging Masterlist "Archivo a procesar: $nombre" INFO

		#verifico que no este duplicado
		if [ -f $MAEDIR/precios/proc/"$nombre" ] ; then
			$BINDIR/Mover $arch $RECHDIR Masterlist
			$BINDIR/Logging Masterlist "Se rechaza archivo por estar DUPLICADO" INFO
			continue
		fi

		#valido registro cabecera
		#valido extra que los campos numericos realmente sean numericos
		cabecera=`sed -n -e 1p "$arch"`
	
		nombreSuper=`echo $cabecera | cut -s -f1 -d';'`
		prov=`echo $cabecera | cut -s -f2 -d';'`
		cantCampos=`echo $cabecera | cut -s -f3 -d';'`
		ubicProd=`echo $cabecera | cut -s -f4 -d';'`
		ubicPrecio=`echo $cabecera | cut -s -f5 -d';'`
		email=`echo $cabecera | cut -s -f6 -d';'`

		if ! grep -q -i '^[^;]\+;'"$prov"';'"$nombreSuper"';[^;]*;[^;]*;[^;]\+$' $MAEDIR/super.mae ; then
			$BINDIR/Mover $arch $RECHDIR Masterlist
			$BINDIR/Logging Masterlist "Se rechaza archivo por Supermercado inexistente" INFO
			continue
		fi

		if [ "$cantCampos" -lt 1 ] ; then
			$BINDIR/Mover $arch $RECHDIR Masterlist
			$BINDIR/Logging Masterlist "Se rechaza archivo por cantidad de campos invalida" INFO
			continue
		fi

		re='^[0-9]+$'

		if ! [[ $ubicProd =~ $re ]] || [ "$ubicProd" -eq "$ubicPrecio" ] || [ "$ubicProd" -lt 0 ] ; then
			$BINDIR/Mover $arch $RECHDIR Masterlist
			$BINDIR/Logging Masterlist "Se rechaza archivo por ubicacion producto invalida" INFO
			continue
		fi

		if ! [[ $ubicPrecio =~ $re ]] || [ "$ubicProd" -eq "$ubicPrecio" ] || [ "$ubicPrecio" -lt 0 ] ; then
			$BINDIR/Mover $arch $RECHDIR Masterlist
			$BINDIR/Logging Masterlist "Se rechaza archivo por ubicacion precio invalida" INFO
			continue
		fi

		usuario=`echo "$nombre" | sed s-'^[^\-]*\-[0-9]\+\.\([^-]*\)$-\1-'`
			
		if ! grep -q -i '^[^;]*;[^;]*;'$usuario';1;'"$email"'$' $MAEDIR/asociados.mae ; then
			$BINDIR/Mover $arch $RECHDIR Masterlist
			$BINDIR/Logging Masterlist "Se rechaza archivo por correo electronico invalido" INFO
			continue
		fi

		#fin validaciones
	
		#me quedo registro de la tabla de supermercados
		# y obtengo el id del super
		registro=`grep -i '^[^;]\+;'"$prov"';'"$nombreSuper"';[^;]*;[^;]*;[^;]\+$' $MAEDIR/super.mae`
		superID=`echo "$registro" | cut -s -f1 -d';'`

		#analizo si es alta o reemplazo
		registro=`grep  -i '^'"$superID"';'"$usuario"';[0-9]\{8\};[^;]\+;[0-9]\+$' $MAEDIR/precios.mae | head -n1 `
	
		anioViejo=`echo "$registro" | sed s-'^[^;]\+;[^;]\+;\([0-9]\{4\}\)[0-9]\{4\};[^;]\+;[0-9]\+$-\1-'`
		mesViejo=`echo "$registro" | sed s-'^[^;]\+;[^;]\+;[0-9]\{4\}\([0-9]\{2\}\)[0-9]\{2\};[^;]\+;[0-9]\+$-\1-'`
		diaViejo=`echo "$registro" | sed s-'^[^;]\+;[^;]\+;[0-9]\{6\}\([0-9]\{2\}\);[^;]\+;[0-9]\+$-\1-'`

		anioNuevo=`echo "$nombre" | sed s-'^.*\-\([0-9]\{4\}\)[0-9]\{4\}\.[^-]*$-\1-'`
		mesNuevo=`echo "$nombre" | sed s-'^.*\-[0-9]\{4\}\([0-9]\{2\}\)[0-9]\{2\}\.[^-]*$-\1-'`
		diaNuevo=`echo "$nombre" | sed s-'^.*\-[0-9]\{6\}\([0-9]\{2\}\)\.[^-]*$-\1-'`

		fechaAUX=$anioNuevo$mesNuevo$diaNuevo
		fechaAUXVieja=$anioViejo$mesViejo$diaViejo

		if [ -z "$registro" ] || [ "$registro" = "" ] ; then
			#PROCESAR ALTA
			alta $arch $superID $usuario $fechaAUX $cantCampos $ubicProd $ubicPrecio
			$BINDIR/Mover $arch $MAEDIR/precios/proc
			continue
		fi
#fiuba-7508-1c2014-cuidadopreciosuelto/mae/precios/PC-20140305.ZAIATZOSCAR ZAIATZOSCAR 20140305 5 2 3
		if [ "$anioNuevo" -gt "$anioViejo" ] ; then
			#PROCESAR REEMPLAZO
			reemplazo $arch $superID $usuario $fechaAUX $cantCampos $ubicProd $ubicPrecio $fechaAUXVieja
			$BINDIR/Mover $arch $MAEDIR/precios/proc
		elif [ "$anioNuevo" -eq "$anioViejo" ] && [ "$mesNuevo" -gt "$mesViejo" ] ; then
			#PROCESAR REEMPLAZO
			reemplazo $arch $superID $usuario $fechaAUX $cantCampos $ubicProd $ubicPrecio $fechaAUXVieja
			$BINDIR/Mover $arch $MAEDIR/precios/proc
		elif [ "$anioNuevo" -eq "$anioViejo" ] && [ "$mesNuevo" -eq "$mesViejo" ] && [ "$diaNuevo" -gt "$diaViejo" ] ; then
			#PROCESAR REEMPLAZO
			reemplazo $arch $superID $usuario $fechaAUX $cantCampos $ubicProd $ubicPrecio $fechaAUXVieja
			$BINDIR/Mover $arch $MAEDIR/precios/proc
		else
			#HIPOTESIS: ANTE FECHAS IGUALES SE DESCARTA
			#DESCARTAR
			$BINDIR/Mover $arch $RECHDIR Masterlist
			$BINDIR/Logging Masterlist "Se rechaza archivo por fecha anterior o igual a la existente" INFO
			continue
		fi

	done

fi

$BINDIR/Logging Masterlist "Fin de Masterlist" INFO



